{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}; //API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.posts;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    /*  postAdded: (state,action) => {\n         state.push(action.payload);\n     }, */\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content,\n            user: userId,\n            date: new Date().toISOString()\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    },\n\n    extraReducers: {\n      [fetchPosts.pending]: (state, action) => {\n        state.status = 'loading';\n      },\n      [fetchPosts.fulfilled]: (state, action) => {\n        state.status = 'succeeded';\n        state.posts = state.posts.concat(action.payload);\n        console.log(state.posts);\n      },\n      [fetchPosts.rejected]: (state, action) => {\n        state.status = 'failed';\n      }\n    }\n  }\n}); //selectors extraction\n\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","client","initialState","posts","status","error","fetchPosts","response","get","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","id","reactions","postAdded","reducer","push","prepare","title","content","userId","user","date","Date","toISOString","postUpdated","extraReducers","pending","fulfilled","concat","console","log","rejected","selectAllPosts","selectPostById","actions"],"mappings":"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","sourcesContent":["import {createSlice, nanoid,createAsyncThunk} from '@reduxjs/toolkit';\nimport {client} from '../../api/client';\n\nconst initialState ={\n    posts:[],\n    status:'idle',\n    error:null,\n}\n\n//API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async()=>{\nconst response = await client.get('/fakeApi/posts')\nreturn response.posts\n})\n\n\n\n\nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n\n       /*  postAdded: (state,action) => {\n            state.push(action.payload);\n        }, */\n\n        reactionAdded(state,action){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.posts.find(post => post.id ===postId)\n\n            if(existingPost){\n                existingPost.reactions[reaction]++\n            }\n        },\n        postAdded:{\n            reducer(state,action) {\n            state.posts.push(action.payload)\n            },\n        prepare(title,content, userId){\n            return{\n                payload:{\n                    id:nanoid(),\n                    title:title,\n                    content:content,\n                    user:userId,\n                    date:new Date().toISOString(),\n                }\n            }\n        }\n    },\n\n        postUpdated (state,action){\n            const {id, title, content} = action.payload\n            const existingPost = state.posts.find(post=>post.id ===id)\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n\n        extraReducers:{\n            [fetchPosts.pending]: (state,action) =>{\n                state.status ='loading'\n            },\n\n            [fetchPosts.fulfilled]:(state, action) =>{\n                state.status ='succeeded'\n                state.posts = state.posts.concat(action.payload)\n                console.log(state.posts)\n            },\n\n            [fetchPosts.rejected] : (state, action) =>{\n                state.status ='failed'\n            }\n        }\n\n    }\n})\n\n//selectors extraction\nexport const selectAllPosts = state => state.posts.posts;\n\nexport const selectPostById =(state, postId) => state.posts.posts.find(post=>\n    post.id ===postId);\nexport const {postAdded,postUpdated, reactionAdded}  = postsSlice.actions;\n\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}