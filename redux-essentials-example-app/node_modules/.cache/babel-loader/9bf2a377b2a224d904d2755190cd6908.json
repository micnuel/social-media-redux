{"ast":null,"code":"import { Server, Model, Factory, belongsTo, hasMany, association, RestSerializer } from 'miragejs';\nimport { nanoid } from '@reduxjs/toolkit';\nimport faker from 'faker';\nimport { sentence, paragraph, article, setRandom } from 'txtgen';\nimport { parseISO } from 'date-fns';\nimport seedrandom from 'seedrandom';\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always'\n}); // Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\n\nlet useSeededRNG = true;\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = array => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\nconst notificationTemplates = ['poked you', 'says hi!', `is glad we're friends`, 'sent you a gift'];\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'; //this.timing = 2000\n\n    this.resource('users');\n    this.resource('posts');\n    this.resource('comments');\n    const server = this;\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs();\n      data.date = new Date().toISOString(); // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n\n      const user = schema.users.find(data.userId);\n      data.user = user;\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!');\n      }\n\n      const result = server.create('post', data);\n      return result;\n    });\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId);\n      return post.comments;\n    });\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5);\n      let pastDate;\n      const now = new Date();\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since);\n      } else {\n        pastDate = new Date(now.valueOf());\n        pastDate.setMinutes(pastDate.getMinutes() - 15);\n      } // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n\n\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users);\n        const template = randomFromArray(notificationTemplates);\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true\n        };\n      });\n      return {\n        notifications\n      };\n    });\n  },\n\n  models: {\n    user: Model.extend({\n      posts: hasMany()\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany()\n    }),\n    comment: Model.extend({\n      post: belongsTo()\n    }),\n    notification: Model.extend({})\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid();\n      },\n\n      firstName() {\n        return faker.name.firstName();\n      },\n\n      lastName() {\n        return faker.name.lastName();\n      },\n\n      name() {\n        return faker.name.findName(this.firstName, this.lastName);\n      },\n\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName);\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, {\n          user\n        });\n      }\n\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid();\n      },\n\n      title() {\n        return sentence();\n      },\n\n      date() {\n        return faker.date.recent(7);\n      },\n\n      content() {\n        return article(1);\n      },\n\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0\n        };\n      },\n\n      afterCreate(post, server) {//server.createList('comment', 3, { post })\n      },\n\n      user: association()\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid();\n      },\n\n      date() {\n        return faker.date.past(2);\n      },\n\n      text() {\n        return paragraph();\n      },\n\n      post: association()\n    })\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer\n  },\n\n  seeds(server) {\n    server.createList('user', 3);\n  }\n\n});","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/api/server.js"],"names":["Server","Model","Factory","belongsTo","hasMany","association","RestSerializer","nanoid","faker","sentence","paragraph","article","setRandom","parseISO","seedrandom","IdSerializer","extend","serializeIds","useSeededRNG","rng","randomSeedString","localStorage","getItem","seedDate","Date","toISOString","setItem","seed","getTime","getRandomInt","min","max","Math","ceil","floor","randomFromArray","array","index","length","notificationTemplates","routes","namespace","resource","server","post","schema","req","data","normalizedRequestAttrs","date","user","users","find","userId","content","Error","result","create","get","posts","params","postId","comments","numNotifications","pastDate","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","map","db","template","id","between","message","read","isNew","models","comment","notification","factories","firstName","name","lastName","findName","username","internet","userName","afterCreate","createList","title","recent","reactions","thumbsUp","hooray","heart","rocket","eyes","past","text","serializers","seeds"],"mappings":"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","sourcesContent":["import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}