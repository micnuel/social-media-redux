{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!',\n  reactions: {\n    thumbsUp: 0,\n    hooray: 0\n  }\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text',\n  reactions: {\n    thumbsUp: 0,\n    hooray: 0\n  }\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    /*  postAdded: (state,action) => {\n         state.push(action.payload);\n     }, */\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content,\n            user: userId,\n            date: new Date().toISOString()\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","initialState","id","title","content","reactions","thumbsUp","hooray","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","postAdded","reducer","push","prepare","userId","user","date","Date","toISOString","postUpdated","actions"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,MAArB,QAAkC,kBAAlC;AAEA,MAAMC,YAAY,GAAE,CAChB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE,QAA1C;AACAC,EAAAA,SAAS,EAAC;AACNC,IAAAA,QAAQ,EAAC,CADH;AAENC,IAAAA,MAAM,EAAC;AAFD;AADV,CADgB,EAOhB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE,WAA1C;AACAC,EAAAA,SAAS,EAAC;AACNC,IAAAA,QAAQ,EAAC,CADH;AAENC,IAAAA,MAAM,EAAC;AAFD;AADV,CAPgB,CAApB;AAcA,MAAMC,UAAU,GAAGT,WAAW,CAAC;AAC3BU,EAAAA,IAAI,EAAC,OADsB;AAE3BR,EAAAA,YAAY,EAACA,YAFc;AAG3BS,EAAAA,QAAQ,EAAC;AAEN;;;AAICC,IAAAA,aAAa,CAACC,KAAD,EAAOC,MAAP,EAAc;AACvB,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAqBF,MAAM,CAACG,OAAlC;AACA,YAAMC,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAWY,MAA9B,CAArB;;AAEA,UAAGG,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACZ,SAAb,CAAuBU,QAAvB;AACH;AACJ,KAbI;;AAcLK,IAAAA,SAAS,EAAC;AACNC,MAAAA,OAAO,CAACT,KAAD,EAAOC,MAAP,EAAe;AACtBD,QAAAA,KAAK,CAACU,IAAN,CAAWT,MAAM,CAACG,OAAlB;AACC,OAHK;;AAIVO,MAAAA,OAAO,CAACpB,KAAD,EAAOC,OAAP,EAAgBoB,MAAhB,EAAuB;AAC1B,eAAM;AACFR,UAAAA,OAAO,EAAC;AACJd,YAAAA,EAAE,EAACF,MAAM,EADL;AAEJG,YAAAA,KAAK,EAACA,KAFF;AAGJC,YAAAA,OAAO,EAACA,OAHJ;AAIJqB,YAAAA,IAAI,EAACD,MAJD;AAKJE,YAAAA,IAAI,EAAC,IAAIC,IAAJ,GAAWC,WAAX;AALD;AADN,SAAN;AASH;;AAdS,KAdL;;AA+BLC,IAAAA,WAAW,CAAEjB,KAAF,EAAQC,MAAR,EAAe;AACtB,YAAM;AAACX,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAuBS,MAAM,CAACG,OAApC;AACA,YAAMC,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAWC,IAAI,IAAEA,IAAI,CAACjB,EAAL,KAAWA,EAA5B,CAArB;;AAEA,UAAGe,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACd,KAAb,GAAqBA,KAArB;AACAc,QAAAA,YAAY,CAACb,OAAb,GAAuBA,OAAvB;AACH;AACJ;;AAvCI;AAHkB,CAAD,CAA9B;AAgDA,OAAO,MAAM;AAACgB,EAAAA,SAAD;AAAWS,EAAAA,WAAX;AAAwBlB,EAAAA;AAAxB,IAA0CH,UAAU,CAACsB,OAA3D;AAEP,eAAetB,UAAU,CAACa,OAA1B","sourcesContent":["import {createSlice, nanoid} from '@reduxjs/toolkit';\n\nconst initialState =[\n    { id: '1', title: 'First Post!', content: 'Hello!', \n    reactions:{\n        thumbsUp:0,\n        hooray:0\n        } \n    },\n    { id: '2', title: 'Second Post', content: 'More text',\n    reactions:{\n        thumbsUp:0,\n        hooray:0\n        } }   \n]\n\nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n\n       /*  postAdded: (state,action) => {\n            state.push(action.payload);\n        }, */\n\n        reactionAdded(state,action){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.find(post => post.id ===postId)\n\n            if(existingPost){\n                existingPost.reactions[reaction]++\n            }\n        },\n        postAdded:{\n            reducer(state,action) {\n            state.push(action.payload)\n            },\n        prepare(title,content, userId){\n            return{\n                payload:{\n                    id:nanoid(),\n                    title:title,\n                    content:content,\n                    user:userId,\n                    date:new Date().toISOString(),\n                }\n            }\n        }\n    },\n\n        postUpdated (state,action){\n            const {id, title, content} = action.payload\n            const existingPost = state.find(post=>post.id ===id)\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n\n    }\n})\n\n\nexport const {postAdded,postUpdated, reactionAdded}  = postsSlice.actions;\n\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}