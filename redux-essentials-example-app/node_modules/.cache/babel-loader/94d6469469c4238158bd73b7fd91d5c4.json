{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!',\n  reactions: {\n    thumbsUp: 0,\n    hooray: 0,\n    heart: 0,\n    rocket: 0,\n    eyes: 0\n  }\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text',\n  reactions: {\n    thumbsUp: 0,\n    hooray: 0,\n    heart: 0,\n    rocket: 0,\n    eyes: 0\n  }\n}]; //selectors extraction\n\nexport const selectAllPosts = state => state.posts;\nexport const selectPostById = (state, postId) => state.posts.find(post => post.id === postId);\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    /*  postAdded: (state,action) => {\n         state.push(action.payload);\n     }, */\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content,\n            user: userId,\n            date: new Date().toISOString()\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","initialState","id","title","content","reactions","thumbsUp","hooray","heart","rocket","eyes","selectAllPosts","state","posts","selectPostById","postId","find","post","postsSlice","name","reducers","reactionAdded","action","reaction","payload","existingPost","postAdded","reducer","push","prepare","userId","user","date","Date","toISOString","postUpdated","actions"],"mappings":"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","sourcesContent":["import {createSlice, nanoid} from '@reduxjs/toolkit';\n\nconst initialState =[\n    { id: '1', title: 'First Post!', content: 'Hello!', \n    reactions:{\n        thumbsUp:0,\n        hooray:0,\n        heart:0,\n        rocket:0,\n        eyes:0\n        } \n    },\n    { id: '2', title: 'Second Post', content: 'More text',\n    reactions:{\n        thumbsUp:0,\n        hooray:0,\n        heart:0,\n        rocket:0,\n        eyes:0\n        } \n    }   \n]\n\n//selectors extraction\nexport const selectAllPosts = state => state.posts;\n\nexport const selectPostById =(state, postId) => state.posts.find(post=>\n    post.id ===postId);\n    \nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n\n       /*  postAdded: (state,action) => {\n            state.push(action.payload);\n        }, */\n\n        reactionAdded(state,action){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.find(post => post.id ===postId)\n\n            if(existingPost){\n                existingPost.reactions[reaction]++\n            }\n        },\n        postAdded:{\n            reducer(state,action) {\n            state.push(action.payload)\n            },\n        prepare(title,content, userId){\n            return{\n                payload:{\n                    id:nanoid(),\n                    title:title,\n                    content:content,\n                    user:userId,\n                    date:new Date().toISOString(),\n                }\n            }\n        }\n    },\n\n        postUpdated (state,action){\n            const {id, title, content} = action.payload\n            const existingPost = state.find(post=>post.id ===id)\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n\n    }\n})\n\n\nexport const {postAdded,postUpdated, reactionAdded}  = postsSlice.actions;\n\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}