{"ast":null,"code":"var _jsxFileName = \"/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/addPostForm.js\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { postAdded } from './postsSlice';\nimport { useHistory } from 'react-router-dom';\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [userId, setUserId] = useState('');\n\n  const onTitleChange = e => setTitle(e.target.value);\n\n  const onContentChange = e => setContent(e.target.value);\n\n  const onAuthorChanged = e => setUserId(e.target.value);\n\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.users);\n\n  const onPostClicked = () => {\n    if (title && content) {\n      dispatch(postAdded(title, content\n      /*id:nanoid(),\n      title:title,\n      content:content*/\n      ));\n      setContent('');\n      setTitle('');\n      setUserId('');\n    }\n  };\n\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\n  const usersOption = users.map(user => /*#__PURE__*/React.createElement(\"option\", {\n    key: user.id,\n    value: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, user.name));\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \" Add a New post\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"postTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \" Post Title:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"postTitle\",\n    name: \"postTitle\",\n    value: title,\n    onChange: onTitleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"postAuthor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"Author:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"postAuthor\",\n    value: userId,\n    onChange: onAuthorChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }), usersOption), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"postContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \" Content:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"postContent\",\n    name: \"postContent\",\n    value: content,\n    onChange: onContentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: onPostClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \" Save Post\")));\n};","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/addPostForm.js"],"names":["React","useState","useDispatch","useSelector","nanoid","postAdded","useHistory","AddPostForm","title","setTitle","content","setContent","userId","setUserId","onTitleChange","e","target","value","onContentChange","onAuthorChanged","dispatch","users","state","onPostClicked","canSave","Boolean","usersOption","map","user","id","name"],"mappings":"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","sourcesContent":["import  React, {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {nanoid } from '@reduxjs/toolkit';\n\nimport {postAdded}  from './postsSlice';\nimport { useHistory } from 'react-router-dom';\n\nexport const AddPostForm = () =>{\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const[userId, setUserId] = useState('');\n    const onTitleChange = e => setTitle(e.target.value);\n    const onContentChange = e => setContent(e.target.value);\n    const onAuthorChanged =(e) =>setUserId(e.target.value)\n\n    const dispatch = useDispatch();\n    const users = useSelector(state=> state.users)\n\n    const onPostClicked =() =>{\n        if(title && content){\n            dispatch(postAdded(\n\n                title,content\n\n                /*id:nanoid(),\n                title:title,\n                content:content*/\n            ))\n\n        setContent('')\n        setTitle('')\n        setUserId('')\n        }\n    }\n\n    const canSave = Boolean(title) &&Boolean(content) && Boolean(userId)\n\n    const usersOption = users.map(user=>(\n        <option key={user.id} value ={user.id}>\n            {user.name}\n        </option>\n    ))\n\n\nreturn(\n    <section>\n        <h2> Add a New post</h2>\n        <form>\n            <label htmlFor=\"postTitle\"> Post Title:</label>\n            <input\n            type=\"text\"\n            id =\"postTitle\"\n            name =\"postTitle\"\n            value={title}\n            onChange ={onTitleChange}\n            />\n            <label htmlFor=\"postAuthor\">Author:</label>\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n                    <option value=\"\"></option>\n                    {usersOption}\n                </select>\n            <label htmlFor=\"postContent\"> Content:</label>\n            <textarea\n            id =\"postContent\"\n            name =\"postContent\"\n            value={content}\n            onChange ={onContentChange}\n            />\n\n            <button type=\"button\" onClick={onPostClicked}> Save Post</button>\n        </form>\n    </section>\n)\n}"]},"metadata":{},"sourceType":"module"}