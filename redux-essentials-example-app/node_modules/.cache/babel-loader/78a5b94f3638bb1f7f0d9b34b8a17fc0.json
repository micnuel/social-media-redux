{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n}); //API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.posts;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await client.post('fakeApi/posts', {\n    post: initialPost\n  });\n  return response.post;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    /*  postAdded: (state,action) => {\n         state.push(action.payload);\n     }, */\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.entities[postId];\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.entities[id];\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      postsAdapter.upsertMany(state, action.payload);\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = 'failed';\n    },\n    [addNewPost.fulfilled]: postsAdapter.addOne\n  }\n}); //selectors extraction\n\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds\n} = postsAdapter.getSelectors(state => state.posts);\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions; //moemorized selectors\n\nexport const selectPostsByUser = createSelector([selectAllPosts, (state, userId) => userId], (posts, userId) => posts.filter(post => post.user === userId));\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","createSelector","createEntityAdapter","client","postsAdapter","sortComparer","a","b","date","localeCompare","initialState","getInitialState","status","error","fetchPosts","response","get","posts","addNewPost","initialPost","post","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","entities","reactions","postUpdated","id","title","content","extraReducers","pending","fulfilled","upsertMany","rejected","addOne","selectAll","selectAllPosts","selectById","selectPostById","selectIds","selectPostIds","getSelectors","postAdded","actions","selectPostsByUser","userId","filter","user","reducer"],"mappings":"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","sourcesContent":["import {createSlice, nanoid,createAsyncThunk, createSelector, createEntityAdapter} from '@reduxjs/toolkit';\nimport {client} from '../../api/client';\n\n\nconst postsAdapter = createEntityAdapter({\n    sortComparer:(a,b) => b.date.localeCompare(a.date)\n})\nconst initialState = postsAdapter.getInitialState({\n    status: 'idle',\n    error:null\n})\n//API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async()=>{\nconst response = await client.get('/fakeApi/posts')\nreturn response.posts\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', \nasync (initialPost) =>{\n    const response = await client.post('fakeApi/posts',{post:initialPost})\n    return response.post\n})\n\n\n\nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n\n       /*  postAdded: (state,action) => {\n            state.push(action.payload);\n        }, */\n\n        reactionAdded(state,action){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.entities[postId]\n\n            if(existingPost){\n                existingPost.reactions[reaction]++\n            }\n        },\n     \n        postUpdated (state,action){\n            const {id, title, content} = action.payload\n            const existingPost = state.entities[id]\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n    },\n\n        extraReducers:{\n            [fetchPosts.pending]: (state,action) =>{\n                state.status ='loading'\n            },\n\n            [fetchPosts.fulfilled]:(state, action) =>{\n                state.status ='succeeded'\n                postsAdapter.upsertMany(state, action.payload)\n            },\n\n            [fetchPosts.rejected] : (state, action) =>{\n                state.status ='failed'\n            },\n\n            [addNewPost.fulfilled] : postsAdapter.addOne\n            \n        }\n\n})\n\n\n\n//selectors extraction\nexport const {\n    selectAll: selectAllPosts,\n    selectById: selectPostById,\n    selectIds: selectPostIds\n} = postsAdapter.getSelectors(state=>state.posts);\nexport const {postAdded,postUpdated, reactionAdded}  = postsSlice.actions;\n\n//moemorized selectors\nexport const selectPostsByUser = createSelector(\n    [selectAllPosts, (state, userId) => userId],\n    (posts, userId) => posts.filter(post => post.user ===userId)\n)\nexport default postsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}