{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst initialState = {\n  data: [],\n  status: 'idle',\n  error: null\n}; //API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n}); //selectors extraction\n\nexport const selectAllPosts = state => state.data.posts;\nexport const selectPostById = (state, postId) => state.data.posts.find(post => post.id === postId);\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    /*  postAdded: (state,action) => {\n         state.push(action.payload);\n     }, */\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.data.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postAdded: {\n      reducer(state, action) {\n        state.data.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content,\n            user: userId,\n            date: new Date().toISOString()\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.data.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","client","initialState","data","status","error","fetchPosts","response","get","selectAllPosts","state","posts","selectPostById","postId","find","post","id","postsSlice","name","reducers","reactionAdded","action","reaction","payload","existingPost","reactions","postAdded","reducer","push","prepare","title","content","userId","user","date","Date","toISOString","postUpdated","actions"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,MAArB,EAA4BC,gBAA5B,QAAmD,kBAAnD;AACA,SAAQC,MAAR,QAAqB,kBAArB;AACA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,IAAI,EAAC,EADW;AAEhBC,EAAAA,MAAM,EAAC,MAFS;AAGhBC,EAAAA,KAAK,EAAC;AAHU,CAApB,C,CAMA;;AAEA,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,kBAAD,EAAqB,YAAS;AACxE,QAAMO,QAAQ,GAAG,MAAMN,MAAM,CAACO,GAAP,CAAW,gBAAX,CAAvB;AACA,SAAOD,QAAQ,CAACJ,IAAhB;AACC,CAHyC,CAAnC,C,CAMP;;AACA,OAAO,MAAMM,cAAc,GAAGC,KAAK,IAAIA,KAAK,CAACP,IAAN,CAAWQ,KAA3C;AAEP,OAAO,MAAMC,cAAc,GAAE,CAACF,KAAD,EAAQG,MAAR,KAAmBH,KAAK,CAACP,IAAN,CAAWQ,KAAX,CAAiBG,IAAjB,CAAsBC,IAAI,IACtEA,IAAI,CAACC,EAAL,KAAWH,MADiC,CAAzC;AAGP,MAAMI,UAAU,GAAGnB,WAAW,CAAC;AAC3BoB,EAAAA,IAAI,EAAC,OADsB;AAE3BhB,EAAAA,YAAY,EAACA,YAFc;AAG3BiB,EAAAA,QAAQ,EAAC;AAEN;;;AAICC,IAAAA,aAAa,CAACV,KAAD,EAAOW,MAAP,EAAc;AACvB,YAAM;AAACR,QAAAA,MAAD;AAASS,QAAAA;AAAT,UAAqBD,MAAM,CAACE,OAAlC;AACA,YAAMC,YAAY,GAAGd,KAAK,CAACP,IAAN,CAAWW,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAWH,MAAnC,CAArB;;AAEA,UAAGW,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACC,SAAb,CAAuBH,QAAvB;AACH;AACJ,KAbI;;AAcLI,IAAAA,SAAS,EAAC;AACNC,MAAAA,OAAO,CAACjB,KAAD,EAAOW,MAAP,EAAe;AACtBX,QAAAA,KAAK,CAACP,IAAN,CAAWyB,IAAX,CAAgBP,MAAM,CAACE,OAAvB;AACC,OAHK;;AAIVM,MAAAA,OAAO,CAACC,KAAD,EAAOC,OAAP,EAAgBC,MAAhB,EAAuB;AAC1B,eAAM;AACFT,UAAAA,OAAO,EAAC;AACJP,YAAAA,EAAE,EAACjB,MAAM,EADL;AAEJ+B,YAAAA,KAAK,EAACA,KAFF;AAGJC,YAAAA,OAAO,EAACA,OAHJ;AAIJE,YAAAA,IAAI,EAACD,MAJD;AAKJE,YAAAA,IAAI,EAAC,IAAIC,IAAJ,GAAWC,WAAX;AALD;AADN,SAAN;AASH;;AAdS,KAdL;;AA+BLC,IAAAA,WAAW,CAAE3B,KAAF,EAAQW,MAAR,EAAe;AACtB,YAAM;AAACL,QAAAA,EAAD;AAAKc,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAuBV,MAAM,CAACE,OAApC;AACA,YAAMC,YAAY,GAAGd,KAAK,CAACP,IAAN,CAAWW,IAAX,CAAgBC,IAAI,IAAEA,IAAI,CAACC,EAAL,KAAWA,EAAjC,CAArB;;AAEA,UAAGQ,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACM,KAAb,GAAqBA,KAArB;AACAN,QAAAA,YAAY,CAACO,OAAb,GAAuBA,OAAvB;AACH;AACJ;;AAvCI;AAHkB,CAAD,CAA9B;AAgDA,OAAO,MAAM;AAACL,EAAAA,SAAD;AAAWW,EAAAA,WAAX;AAAwBjB,EAAAA;AAAxB,IAA0CH,UAAU,CAACqB,OAA3D;AAEP,eAAerB,UAAU,CAACU,OAA1B","sourcesContent":["import {createSlice, nanoid,createAsyncThunk} from '@reduxjs/toolkit';\nimport {client} from '../../api/client';\nconst initialState ={\n    data:[],\n    status:'idle',\n    error:null,\n}\n\n//API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async()=>{\nconst response = await client.get('/fakeApi/posts')\nreturn response.data\n})\n\n\n//selectors extraction\nexport const selectAllPosts = state => state.data.posts;\n\nexport const selectPostById =(state, postId) => state.data.posts.find(post=>\n    post.id ===postId);\n\nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n\n       /*  postAdded: (state,action) => {\n            state.push(action.payload);\n        }, */\n\n        reactionAdded(state,action){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.data.find(post => post.id ===postId)\n\n            if(existingPost){\n                existingPost.reactions[reaction]++\n            }\n        },\n        postAdded:{\n            reducer(state,action) {\n            state.data.push(action.payload)\n            },\n        prepare(title,content, userId){\n            return{\n                payload:{\n                    id:nanoid(),\n                    title:title,\n                    content:content,\n                    user:userId,\n                    date:new Date().toISOString(),\n                }\n            }\n        }\n    },\n\n        postUpdated (state,action){\n            const {id, title, content} = action.payload\n            const existingPost = state.data.find(post=>post.id ===id)\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n\n    }\n})\n\n\nexport const {postAdded,postUpdated, reactionAdded}  = postsSlice.actions;\n\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}