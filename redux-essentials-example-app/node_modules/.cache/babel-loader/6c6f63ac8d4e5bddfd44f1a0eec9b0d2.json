{"ast":null,"code":"var _jsxFileName = \"/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/posts/addPostForm.js\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { addNewPost } from './postsSlice';\nimport { useHistory } from 'react-router-dom';\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [userId, setUserId] = useState('');\n  const [addRequestStatus, setAddRequestStatus] = useState('idle');\n\n  const onTitleChange = e => setTitle(e.target.value);\n\n  const onContentChange = e => setContent(e.target.value);\n\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.users);\n  const canSave = [title, content, userId].every(Boolean) && addRequestStatus === 'idle';\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending');\n        const resultAction = await dispatch(addNewPost({\n          title,\n          content,\n          user: userId\n        }));\n        unwrapResult(resultAction);\n        setTitle('');\n        setContent('');\n        setUserId('');\n      } catch (err) {\n        console.log('Failed to save the post', err);\n      } finally {\n        setAddRequestStatus('idle');\n      }\n    }\n  };\n\n  const usersOption = users.map(user => /*#__PURE__*/React.createElement(\"option\", {\n    key: user.id,\n    value: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, user.name));\n\n  const onAuthorChanged = e => setUserId(e.target.value);\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \" Add a New post\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"postTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \" Post Title:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"postTitle\",\n    name: \"postTitle\",\n    value: title,\n    onChange: onTitleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"postAuthor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Author:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"postAuthor\",\n    value: userId,\n    onChange: onAuthorChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }), usersOption), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"postContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \" Content:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"postContent\",\n    name: \"postContent\",\n    value: content,\n    onChange: onContentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: onSavePostClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \" Save Post\")));\n};","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/posts/addPostForm.js"],"names":["React","useState","useDispatch","useSelector","unwrapResult","addNewPost","useHistory","AddPostForm","title","setTitle","content","setContent","userId","setUserId","addRequestStatus","setAddRequestStatus","onTitleChange","e","target","value","onContentChange","dispatch","users","state","canSave","every","Boolean","onSavePostClicked","resultAction","user","err","console","log","usersOption","map","id","name","onAuthorChanged"],"mappings":";AAAA,OAAQA,KAAR,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AAEA,SAAQC,UAAR,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAK;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAK,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAK,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,MAAD,CAAvD;;AACA,QAAMe,aAAa,GAAGC,CAAC,IAAIR,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnC;;AACA,QAAMC,eAAe,GAAGH,CAAC,IAAIN,UAAU,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAvC;;AAEA,QAAME,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,KAAK,GAAGnB,WAAW,CAACoB,KAAK,IAAGA,KAAK,CAACD,KAAf,CAAzB;AAEA,QAAME,OAAO,GAAG,CAAChB,KAAD,EAAOE,OAAP,EAAeE,MAAf,EAAuBa,KAAvB,CAA6BC,OAA7B,KAChBZ,gBAAgB,KAAI,MADpB;;AAEA,QAAMa,iBAAiB,GAAG,YAAW;AACjC,QAAGH,OAAH,EAAW;AACP,UAAG;AACCT,QAAAA,mBAAmB,CAAC,SAAD,CAAnB;AACA,cAAMa,YAAY,GAAG,MAAMP,QAAQ,CAC/BhB,UAAU,CAAC;AAACG,UAAAA,KAAD;AAAOE,UAAAA,OAAP;AAAemB,UAAAA,IAAI,EAACjB;AAApB,SAAD,CADqB,CAAnC;AAGAR,QAAAA,YAAY,CAACwB,YAAD,CAAZ;AACAnB,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,QAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,QAAAA,SAAS,CAAC,EAAD,CAAT;AACH,OATD,CAWA,OAAMiB,GAAN,EAAU;AACNC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,GAAvC;AACH,OAbD,SAaS;AACLf,QAAAA,mBAAmB,CAAC,MAAD,CAAnB;AACH;AACJ;AACJ,GAnBD;;AAuBA,QAAMkB,WAAW,GAAGX,KAAK,CAACY,GAAN,CAAUL,IAAI,iBAC9B;AAAQ,IAAA,GAAG,EAAEA,IAAI,CAACM,EAAlB;AAAsB,IAAA,KAAK,EAAGN,IAAI,CAACM,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,IAAI,CAACO,IADV,CADgB,CAApB;;AAMJ,QAAMC,eAAe,GAAGpB,CAAD,IAAMJ,SAAS,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAtC;;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,EAAE,EAAE,WAFJ;AAGA,IAAA,IAAI,EAAE,WAHN;AAIA,IAAA,KAAK,EAAEX,KAJP;AAKA,IAAA,QAAQ,EAAGQ,aALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eASI;AAAO,IAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATJ,eAUQ;AAAQ,IAAA,EAAE,EAAC,YAAX;AAAwB,IAAA,KAAK,EAAEJ,MAA/B;AAAuC,IAAA,QAAQ,EAAEyB,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKJ,WAFL,CAVR,eAcI;AAAO,IAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAdJ,eAeI;AACA,IAAA,EAAE,EAAE,aADJ;AAEA,IAAA,IAAI,EAAE,aAFN;AAGA,IAAA,KAAK,EAAEvB,OAHP;AAIA,IAAA,QAAQ,EAAGU,eAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,eAsBI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEO,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAtBJ,CAFJ,CADJ;AA6BC,CA3EM","sourcesContent":["import  React, {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {unwrapResult} from '@reduxjs/toolkit';\n\nimport {addNewPost}  from './postsSlice';\nimport { useHistory } from 'react-router-dom';\n\nexport const AddPostForm = () =>{\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const[userId, setUserId] = useState('');\n    const[addRequestStatus, setAddRequestStatus] = useState('idle')\n    const onTitleChange = e => setTitle(e.target.value);\n    const onContentChange = e => setContent(e.target.value);\n\n    const dispatch = useDispatch();\n    const users = useSelector(state=> state.users)\n\n    const canSave = [title,content,userId].every(Boolean) && \n    addRequestStatus ==='idle';\n    const onSavePostClicked = async () =>{\n        if(canSave){\n            try{\n                setAddRequestStatus('pending');\n                const resultAction = await dispatch(\n                    addNewPost({title,content,user:userId})\n                );\n                unwrapResult(resultAction);\n                setTitle('');\n                setContent('');\n                setUserId('');\n            }\n\n            catch(err){\n                console.log('Failed to save the post', err)\n            } finally{\n                setAddRequestStatus('idle');\n            }\n        }\n    }\n\n\n\n    const usersOption = users.map(user=>(\n        <option key={user.id} value ={user.id}>\n            {user.name}\n        </option>\n    ))\n\nconst onAuthorChanged =(e) =>setUserId(e.target.value)\n\n\n\nreturn(\n    <section>\n        <h2> Add a New post</h2>\n        <form>\n            <label htmlFor=\"postTitle\"> Post Title:</label>\n            <input\n            type=\"text\"\n            id =\"postTitle\"\n            name =\"postTitle\"\n            value={title}\n            onChange ={onTitleChange}\n            />\n            <label htmlFor=\"postAuthor\">Author:</label>\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n                    <option value=\"\"></option>\n                    {usersOption}\n                </select>\n            <label htmlFor=\"postContent\"> Content:</label>\n            <textarea\n            id =\"postContent\"\n            name =\"postContent\"\n            value={content}\n            onChange ={onContentChange}\n            />\n\n            <button type=\"button\" onClick={onSavePostClicked}> Save Post</button>\n        </form>\n    </section>\n)\n}"]},"metadata":{},"sourceType":"module"}