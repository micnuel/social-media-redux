{"ast":null,"code":"var _jsxFileName = \"/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsList.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PostAuthor } from '../users/postAuthor';\nimport { TimeAgo } from './timeAgo';\nimport { Link } from 'react-router-dom';\nimport { ReactionButtons } from './reactionButtons';\nimport { selectAllPosts, fetchPosts } from './postsSlice';\nexport const PostList = () => {\n  const dispatch = useDispatch(); //const posts = useSelector(state => state.posts)\n\n  const posts = useSelector(selectAllPosts);\n  const postStatus = useSelector(state => state.data.status);\n  const error = useSelector(state => state.data.error);\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postStatus, dispatch]);\n  let content;\n\n  if (postStatus === 'loading') {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loaded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 18\n      }\n    }, \" Loading...\");\n  } else if (postStatus === 'succeeded') {\n    const orderedPosts = data.slice().sort((a, b) => b.date.localeCompare(a.data));\n    content = orderedPosts.map(post => /*#__PURE__*/React.createElement(PostExcerpt, {\n      key: post.id,\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }));\n  } else if (postStatus === 'failed') {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 18\n      }\n    }, \" \", error);\n  } // the post on the array have no date, so you wanna sort em?\n  //const orderedPosts = posts.slice().sort((a,b) =>b.date.localeCompare(a.date))\n\n\n  const renderedPosts = posts.map(post => /*#__PURE__*/React.createElement(\"article\", {\n    className: \"post-excerpt\",\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \" \", post.title), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PostAuthor, {\n    userId: post.user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TimeAgo, {\n    timeStamp: post.date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \" \", post.content.substring(0, 100)), /*#__PURE__*/React.createElement(ReactionButtons, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: `/posts/${post.id}`,\n    className: \"button muted-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"View Post\")));\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Posts\"), content);\n};","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsList.js"],"names":["React","useEffect","useSelector","useDispatch","PostAuthor","TimeAgo","Link","ReactionButtons","selectAllPosts","fetchPosts","PostList","dispatch","posts","postStatus","state","data","status","error","content","orderedPosts","slice","sort","a","b","date","localeCompare","map","post","id","renderedPosts","title","user","substring"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {useSelector,useDispatch } from 'react-redux';\n\nimport {PostAuthor} from '../users/postAuthor'\nimport {TimeAgo} from './timeAgo'\nimport {Link} from 'react-router-dom';\nimport {ReactionButtons} from './reactionButtons';\nimport {selectAllPosts, fetchPosts} from './postsSlice';\nexport const PostList = () =>{\n    const dispatch = useDispatch();\n    \n    //const posts = useSelector(state => state.posts)\n    const posts = useSelector(selectAllPosts)\n\n    const postStatus = useSelector(state=> state.data.status)\n    const error = useSelector(state => state.data.error)\n\n    useEffect(()=> {\n        if(postStatus ==='idle'){\n            dispatch(fetchPosts())\n        }\n    }, [postStatus,dispatch])\n\n    let content;\n\n    if(postStatus ==='loading'){\n        content =<div className=\"loaded\"> Loading...</div>\n\n    }else if (postStatus==='succeeded'){\n        const orderedPosts =data.slice().sort((a,b)=>\n        b.date.localeCompare(a.data))\n        content = orderedPosts.map(post =>(\n            <PostExcerpt key ={post.id} post ={post} />\n        ))\n    } else if(postStatus==='failed'){\n        content= <div> {error}</div>\n    }\n\n    // the post on the array have no date, so you wanna sort em?\n   //const orderedPosts = posts.slice().sort((a,b) =>b.date.localeCompare(a.date))\n\n    const renderedPosts = posts.map(post =>(\n        <article className=\"post-excerpt\" key ={post.id}>\n            <h3> {post.title}</h3>\n            <div>\n                <PostAuthor userId={post.user} />\n                <TimeAgo timeStamp ={post.date} />  \n            </div>\n            \n            <p> {post.content.substring(0,100)}</p>\n            < ReactionButtons post ={post} />\n            <Link to= {`/posts/${post.id}`} \n            className=\"button muted-button\">\n            View Post\n            </Link>\n        </article>\n    ))\n\n    return (\n        <section>\n            <h2>Posts</h2>\n            {content}\n        </section>\n    )\n}"]},"metadata":{},"sourceType":"module"}