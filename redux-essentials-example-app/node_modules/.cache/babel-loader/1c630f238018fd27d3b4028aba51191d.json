{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nexport const fetchNotifications = createAsyncThunk('notifications/fetchNotifications', async (_, {\n  getState\n}) => {\n  const allNotifications = selectAllNotifications(getState());\n  const [latestNotification] = allNotifications;\n  const latestTimestamp = latestNotification ? latestNotification.date : '';\n  const response = await client.get(`/fakeApi/notifications?since=${latestTimestamp}`);\n  return response.notifications;\n});\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {},\n  extraReducers: {\n    [fetchNotifications.fulfilled]: (state, action) => {\n      state.push(...action.payload);\n      state.sort((a, b) => b.date.localeCompare(a.date));\n    }\n  }\n});\nexport default notificationsSlice.reducer;\nexport const selectAllNotifications = state => state.notifications;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/notifications/notificationsSlice.js"],"names":["createSlice","createAsyncThunk","client","fetchNotifications","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","date","response","get","notifications","notificationsSlice","name","initialState","reducers","extraReducers","fulfilled","state","action","push","payload","sort","a","b","localeCompare","reducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AACA,SAAQC,MAAR,QAAqB,kBAArB;AAGA,OAAO,MAAMC,kBAAkB,GAAGF,gBAAgB,CAC9C,kCAD8C,EAE9C,OAAOG,CAAP,EAAU;AAACC,EAAAA;AAAD,CAAV,KAAwB;AACpB,QAAMC,gBAAgB,GAAGC,sBAAsB,CAACF,QAAQ,EAAT,CAA/C;AACA,QAAM,CAACG,kBAAD,IAAuBF,gBAA7B;AACA,QAAMG,eAAe,GAAGD,kBAAkB,GAACA,kBAAkB,CAACE,IAApB,GAA0B,EAApE;AACA,QAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACU,GAAP,CAClB,gCAA+BH,eAAgB,EAD7B,CAAvB;AAKA,SAAOE,QAAQ,CAACE,aAAhB;AACF,CAZ4C,CAA3C;AAeP,MAAMC,kBAAkB,GAAGd,WAAW,CAAC;AACnCe,EAAAA,IAAI,EAAE,eAD6B;AAEnCC,EAAAA,YAAY,EAAC,EAFsB;AAGnCC,EAAAA,QAAQ,EAAC,EAH0B;AAInCC,EAAAA,aAAa,EAAC;AACV,KAACf,kBAAkB,CAACgB,SAApB,GAAgC,CAACC,KAAD,EAAOC,MAAP,KAAiB;AAC7CD,MAAAA,KAAK,CAACE,IAAN,CAAW,GAAGD,MAAM,CAACE,OAArB;AACAH,MAAAA,KAAK,CAACI,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAASA,CAAC,CAAChB,IAAF,CAAOiB,aAAP,CAAqBF,CAAC,CAACf,IAAvB,CAApB;AACH;AAJS;AAJqB,CAAD,CAAtC;AAYA,eAAeI,kBAAkB,CAACc,OAAlC;AAEA,OAAO,MAAMrB,sBAAsB,GAAGa,KAAK,IAAIA,KAAK,CAACP,aAA9C","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\nimport {client} from '../../api/client';\n\n\nexport const fetchNotifications = createAsyncThunk(\n    'notifications/fetchNotifications',\n    async (_, {getState}) =>{\n        const allNotifications = selectAllNotifications(getState())\n        const [latestNotification] = allNotifications\n        const latestTimestamp = latestNotification?latestNotification.date: ''\n        const response = await client.get(\n            `/fakeApi/notifications?since=${latestTimestamp}`\n\n        )\n\n        return response.notifications\n     }\n)\n\nconst notificationsSlice = createSlice({\n    name: 'notifications',\n    initialState:[],\n    reducers:{},\n    extraReducers:{\n        [fetchNotifications.fulfilled]: (state,action) =>{\n            state.push(...action.payload)\n            state.sort((a,b) => b.date.localeCompare(a.date))\n        }\n    }\n})\n\nexport default notificationsSlice.reducer\n\nexport const selectAllNotifications = state => state.notifications"]},"metadata":{},"sourceType":"module"}