{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}; //API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.posts;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await client.post('fakeApi/posts', {\n    post: initialPost\n  });\n  return response.post;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    /*  postAdded: (state,action) => {\n         state.push(action.payload);\n     }, */\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.posts = state.posts.concat(action.payload);\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = 'failed';\n    },\n    [addNewPost.fulfilled]: (state, action) => {\n      state.posts.push(action.payload);\n    }\n  }\n}); //selectors extraction\n\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","client","initialState","posts","status","error","fetchPosts","response","get","addNewPost","initialPost","post","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","id","reactions","postUpdated","title","content","extraReducers","pending","fulfilled","concat","rejected","push","selectAllPosts","selectPostById","postAdded","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice, nanoid,createAsyncThunk} from '@reduxjs/toolkit';\nimport {client} from '../../api/client';\n\nconst initialState ={\n    posts:[],\n    status:'idle',\n    error:null,\n}\n\n//API fetch\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async()=>{\nconst response = await client.get('/fakeApi/posts')\nreturn response.posts\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', \nasync (initialPost) =>{\n    const response = await client.post('fakeApi/posts',{post:initialPost})\n    return response.post\n})\n\n\nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n\n       /*  postAdded: (state,action) => {\n            state.push(action.payload);\n        }, */\n\n        reactionAdded(state,action){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.posts.find(post => post.id ===postId)\n\n            if(existingPost){\n                existingPost.reactions[reaction]++\n            }\n        },\n     \n        postUpdated (state,action){\n            const {id, title, content} = action.payload\n            const existingPost = state.posts.find(post=>post.id ===id)\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n    },\n\n        extraReducers:{\n            [fetchPosts.pending]: (state,action) =>{\n                state.status ='loading'\n            },\n\n            [fetchPosts.fulfilled]:(state, action) =>{\n                state.status ='succeeded'\n                state.posts = state.posts.concat(action.payload)\n            },\n\n            [fetchPosts.rejected] : (state, action) =>{\n                state.status ='failed'\n            },\n\n            [addNewPost.fulfilled] : (state,action) =>{\n                state.posts.push(action.payload)\n            },\n        }\n\n})\n\n//selectors extraction\nexport const selectAllPosts = state => state.posts.posts;\n\nexport const selectPostById =(state, postId) => state.posts.posts.find(post=>\n    post.id === postId);\nexport const {postAdded,postUpdated, reactionAdded}  = postsSlice.actions;\n\nexport default postsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}