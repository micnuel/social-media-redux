{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!'\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text'\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        };\n      }\n\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social-media/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","postUpdated","existingPost","find","post","actions"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,MAArB,QAAkC,kBAAlC;AAEA,MAAMC,YAAY,GAAE,CAChB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE;AAA1C,CADgB,EAEhB;AAAEF,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE;AAA1C,CAFgB,CAApB;AAKA,MAAMC,UAAU,GAAGN,WAAW,CAAC;AAC3BO,EAAAA,IAAI,EAAC,OADsB;AAE3BL,EAAAA,YAAY,EAACA,YAFc;AAG3BM,EAAAA,QAAQ,EAAC;AACLC,IAAAA,SAAS,EAAC;AACNC,MAAAA,OAAO,CAACC,KAAD,EAAOC,MAAP,EAAe;AACtBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACC,OAHK;;AAIVC,MAAAA,OAAO,CAACX,KAAD,EAAOC,OAAP,EAAe;AAClB,eAAM;AACFS,UAAAA,OAAO,EAAC;AACJX,YAAAA,EAAE,EAACF,MAAM,EADL;AAEJG,YAAAA,KAFI;AAGJC,YAAAA;AAHI;AADN,SAAN;AAOH;;AAZS,KADL;AAgBLW,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAOC,MAAP,KAAiB;AAC1B,YAAM;AAACT,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAuBO,MAAM,CAACE,OAApC;AACA,YAAMG,YAAY,GAAGN,KAAK,CAACO,IAAN,CAAWC,IAAI,IAAEA,IAAI,CAAChB,EAAL,KAAWA,EAA5B,CAArB;;AAEA,UAAGc,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACb,KAAb,GAAqBA,KAArB;AACAa,QAAAA,YAAY,CAACZ,OAAb,GAAuBA,OAAvB;AACH;AACJ;AAxBI;AAHkB,CAAD,CAA9B;AAgCA,OAAO,MAAM;AAACI,EAAAA,SAAD;AAAWO,EAAAA;AAAX,IAA2BV,UAAU,CAACc,OAA5C;AAEP,eAAed,UAAU,CAACI,OAA1B","sourcesContent":["import {createSlice, nanoid} from '@reduxjs/toolkit';\n\nconst initialState =[\n    { id: '1', title: 'First Post!', content: 'Hello!' },\n    { id: '2', title: 'Second Post', content: 'More text' }   \n]\n\nconst postsSlice = createSlice({\n    name:'posts',\n    initialState:initialState,\n    reducers:{\n        postAdded:{\n            reducer(state,action) {\n            state.push(action.payload)\n            },\n        prepare(title,content){\n            return{\n                payload:{\n                    id:nanoid(),\n                    title,\n                    content\n                }\n            }\n        }\n        },\n\n        postUpdated: (state,action) =>{\n            const {id, title, content} = action.payload;\n            const existingPost = state.find(post=>post.id ===id)\n\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        }\n    }\n})\n\n\nexport const {postAdded,postUpdated}  = postsSlice.actions;\n\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}