{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst usersAdapter = createEntityAdapter();\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users');\n  return response.users;\n});\nconst initialState = usersAdapter.getInitialState();\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled]: usersAdapter.setAll\n  }\n});\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById\n} = usersAdapter.getSelectors(state => state.users);\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/users/usersSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","client","usersAdapter","fetchUsers","response","get","users","initialState","getInitialState","usersSlice","name","reducers","extraReducers","fulfilled","setAll","selectAll","selectAllUsers","selectById","selectUserById","getSelectors","state","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,QAAkE,kBAAlE;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,MAAMC,YAAY,GAAGF,mBAAmB,EAAxC;AACA,OAAO,MAAMG,UAAU,GAAGJ,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AACzE,QAAMK,QAAQ,GAAG,MAAMH,MAAM,CAACI,GAAP,CAAW,gBAAX,CAAvB;AACA,SAAOD,QAAQ,CAACE,KAAhB;AACD,CAHyC,CAAnC;AAIP,MAAMC,YAAY,GAAGL,YAAY,CAACM,eAAb,EAArB;AAGA,MAAMC,UAAU,GAAGX,WAAW,CAAC;AAC3BY,EAAAA,IAAI,EAAC,OADsB;AAE3BH,EAAAA,YAAY,EAACA,YAFc;AAG3BI,EAAAA,QAAQ,EAAC,EAHkB;AAMzBC,EAAAA,aAAa,EAAE;AACb,KAACT,UAAU,CAACU,SAAZ,GAAwBX,YAAY,CAACY;AADxB;AANU,CAAD,CAA9B;AAWA,OAAO,MAAM;AACXC,EAAAA,SAAS,EAAEC,cADA;AAEXC,EAAAA,UAAU,EAAEC;AAFD,IAGThB,YAAY,CAACiB,YAAb,CAA0BC,KAAK,IAAGA,KAAK,CAACd,KAAxC,CAHG;AAKP,eAAeG,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst usersAdapter = createEntityAdapter()\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.users\n})\nconst initialState = usersAdapter.getInitialState()\n\n\nconst usersSlice = createSlice({\n    name:'users',\n    initialState:initialState,\n    reducers:{\n      \n    },\n      extraReducers: {\n        [fetchUsers.fulfilled]: usersAdapter.setAll\n      },\n})\n\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById\n} = usersAdapter.getSelectors(state =>state.users)\n \nexport default usersSlice.reducer;"]},"metadata":{},"sourceType":"module"}