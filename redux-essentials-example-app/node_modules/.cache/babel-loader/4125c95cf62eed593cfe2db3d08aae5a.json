{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst notificationAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nexport const fetchNotifications = createAsyncThunk('notifications/fetchNotifications', async (_, {\n  getState\n}) => {\n  const allNotifications = selectAllNotifications(getState());\n  const [latestNotification] = allNotifications;\n  const latestTimestamp = latestNotification ? latestNotification.date : '';\n  const response = await client.get(`/fakeApi/notifications?since=${latestTimestamp}`);\n  return response.notifications;\n});\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: notificationAdapter.getInitialState(),\n  reducers: {\n    allNotificationsRead(state, action) {\n      Object.values(state.entities).forEach(notification => {\n        notification.read = true;\n      });\n    }\n\n  },\n  extraReducers: {\n    [fetchNotifications.fulfilled]: (state, action) => {\n      Object.values(state.entities).forEach(notification => {\n        notification.isNew = !notification.read;\n      });\n      notificationAdapter.upsertMany(state, action.payload);\n    }\n  }\n});\nexport default notificationsSlice.reducer;\nexport const {\n  allNotificationsRead\n} = notificationsSlice.actions;\nexport const {\n  selectAll: selectAllNotifications\n} = notificationAdapter.getSelectors(state => state.notifications);","map":{"version":3,"sources":["/Users/emeka/Documents/Tutorials/Projects/redux-social/social-media-redux/redux-essentials-example-app/src/features/notifications/notificationsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","client","notificationAdapter","sortComparer","a","b","date","localeCompare","fetchNotifications","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","response","get","notifications","notificationsSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","fulfilled","isNew","upsertMany","payload","reducer","actions","selectAll","getSelectors"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,EAAuCC,mBAAvC,QAAiE,kBAAjE;AACA,SAAQC,MAAR,QAAqB,kBAArB;AAGA,MAAMC,mBAAmB,GAAGF,mBAAmB,CAAC;AAC5CG,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAGC,CAAH,KAASA,CAAC,CAACC,IAAF,CAAOC,aAAP,CAAqBH,CAAC,CAACE,IAAvB;AADqB,CAAD,CAA/C;AAGA,OAAO,MAAME,kBAAkB,GAAGT,gBAAgB,CAC9C,kCAD8C,EAE9C,OAAOU,CAAP,EAAU;AAACC,EAAAA;AAAD,CAAV,KAAwB;AACpB,QAAMC,gBAAgB,GAAGC,sBAAsB,CAACF,QAAQ,EAAT,CAA/C;AACA,QAAM,CAACG,kBAAD,IAAuBF,gBAA7B;AACA,QAAMG,eAAe,GAAGD,kBAAkB,GAACA,kBAAkB,CAACP,IAApB,GAA0B,EAApE;AACA,QAAMS,QAAQ,GAAG,MAAMd,MAAM,CAACe,GAAP,CAClB,gCAA+BF,eAAgB,EAD7B,CAAvB;AAKA,SAAOC,QAAQ,CAACE,aAAhB;AACF,CAZ4C,CAA3C;AAeP,MAAMC,kBAAkB,GAAGpB,WAAW,CAAC;AACnCqB,EAAAA,IAAI,EAAE,eAD6B;AAEnCC,EAAAA,YAAY,EAAClB,mBAAmB,CAACmB,eAApB,EAFsB;AAGnCC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,oBAAoB,CAACC,KAAD,EAAOC,MAAP,EAAc;AAC9BC,MAAAA,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,QAApB,EAA8BC,OAA9B,CAAsCC,YAAY,IAAG;AACjDA,QAAAA,YAAY,CAACC,IAAb,GAAmB,IAAnB;AACH,OAFD;AAGH;;AALI,GAH0B;AAUnCC,EAAAA,aAAa,EAAC;AACV,KAACxB,kBAAkB,CAACyB,SAApB,GAAgC,CAACT,KAAD,EAAOC,MAAP,KAAiB;AAC7CC,MAAAA,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,QAApB,EAA8BC,OAA9B,CAAsCC,YAAY,IAAG;AACjDA,QAAAA,YAAY,CAACI,KAAb,GAAoB,CAACJ,YAAY,CAACC,IAAlC;AACH,OAFD;AAGA7B,MAAAA,mBAAmB,CAACiC,UAApB,CAA+BX,KAA/B,EAAqCC,MAAM,CAACW,OAA5C;AACH;AANS;AAVqB,CAAD,CAAtC;AAoBA,eAAelB,kBAAkB,CAACmB,OAAlC;AACA,OAAO,MAAM;AAACd,EAAAA;AAAD,IAAyBL,kBAAkB,CAACoB,OAAlD;AACP,OAAO,MAAK;AACRC,EAAAA,SAAS,EAAC3B;AADF,IAERV,mBAAmB,CAACsC,YAApB,CAAiChB,KAAK,IAAIA,KAAK,CAACP,aAAhD,CAFG","sourcesContent":["import {createSlice, createAsyncThunk, createEntityAdapter} from '@reduxjs/toolkit';\nimport {client} from '../../api/client';\n\n\nconst notificationAdapter = createEntityAdapter({\n    sortComparer: (a,b) => b.date.localeCompare(a.date)\n})\nexport const fetchNotifications = createAsyncThunk(\n    'notifications/fetchNotifications',\n    async (_, {getState}) =>{\n        const allNotifications = selectAllNotifications(getState())\n        const [latestNotification] = allNotifications\n        const latestTimestamp = latestNotification?latestNotification.date: ''\n        const response = await client.get(\n            `/fakeApi/notifications?since=${latestTimestamp}`\n\n        )\n\n        return response.notifications\n     }\n)\n\nconst notificationsSlice = createSlice({\n    name: 'notifications',\n    initialState:notificationAdapter.getInitialState(),\n    reducers:{\n        allNotificationsRead(state,action){\n            Object.values(state.entities).forEach(notification =>{\n                notification.read =true\n            })\n        }\n    },\n    extraReducers:{\n        [fetchNotifications.fulfilled]: (state,action) =>{\n            Object.values(state.entities).forEach(notification =>{\n                notification.isNew =!notification.read\n            })\n            notificationAdapter.upsertMany(state,action.payload)\n        }\n    }\n})\n\nexport default notificationsSlice.reducer\nexport const {allNotificationsRead} = notificationsSlice.actions\nexport const{\n    selectAll:selectAllNotifications\n} = notificationAdapter.getSelectors(state => state.notifications)"]},"metadata":{},"sourceType":"module"}